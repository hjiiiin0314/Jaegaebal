<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.jaegaebal.mapper.InsaMapper">

	<resultMap type="Company" id="CompanyResultMap">
		<result column="company_code" 		property="companyCode"/>
		<result column="company_name" 		property="companyName"/>
		<result column="company_eng_name" 	property="companyEngName"/>
		<result column="mutual_name" 		property="mutualName"/>
		<result column="company_addr" 		property="companyAddr"/>
		<result column="company_phone" 		property="companyPhone"/>
		<result column="company_ceo_name" 	property="companyCeoName"/>
		<result column="company_start_date" property="companyStartDate"/>
		<result column="company_num" 		property="companyNum"/>
		<result column="company_fax" 		property="companyFax"/>
		<result column="reg_staff_name" 	property="regStaffName"/>
		<result column="reg_date" 			property="regDate"/>
	</resultMap>
	
	<resultMap type="Jojic" id="JojicResultMap">
		<result column="jojic_code" 			property="jojicCode"/>
		<result column="jojic_name" 			property="jojicName"/>
		<result column="jojic_sosoc_name" 		property="jojicSosocName"/>
		<result column="parent_jojic_name" 		property="parentJojicName"/>
		<result column="jojic_manager_name" 	property="jojicManagerName"/>
		<result column="reg_staff_name" 		property="regStaffName"/>
		<result column="reg_date" 				property="regDate"/>
		<result column="jojic_status" 			property="jojicStatus"/>

	</resultMap>
	
	<resultMap type="StaffInfo" id="StaffInfoResultMap">
		<result column="staff_num" 					property="staffNum"/>
		<result column="jojic_code" 				property="jojicCode"/>
		<result column="access_num" 				property="accessNum"/>
		<result column="staff_level_code" 			property="staffLevelCode"/>
		<result column="staff_position" 			property="staffPosition"/>
		<result column="hobong" 					property="hobong"/>
		<result column="staff_basic_salary" 		property="staffBasicSalary"/>
		<result column="staff_pw" 					property="staffPw"/>
		<result column="staff_name" 				property="staffName"/>
		<result column="staff_status_code" 			property="staffStatusCode"/>
		<result column="employment_status" 			property="employmentStatus"/>
		<result column="company_in_date" 			property="companyInDate"/>
		<result column="company_out_date" 			property="companyOutDate"/>
		<result column="reg_staff_name" 			property="regStaffName"/>
		<result column="reg_date" 					property="regDate"/>
		<result column="basic_info_code" 			property="basicInfoCode"/>
		<result column="staff_eng_name" 			property="staffEngName"/>
		<result column="human_num" 					property="humanNum"/>
		<result column="staff_gender" 				property="staffGender"/>
		<result column="staff_nationality" 			property="staffNationality"/>
		<result column="staff_country" 				property="staffCountry"/>
		<result column="staff_phone" 				property="staffPhone"/>
		<result column="staff_email" 				property="staffEmail"/>
		<result column="staff_marriged" 			property="staffMarriged"/>
		<result column="staff_addr" 				property="staffAddr"/>
		<result column="family_info_code" 			property="familyInfoCode"/>
		<result column="relation" 					property="relation"/>
		<result column="family_name" 				property="familyName"/>
		<result column="family_birthday" 			property="familyBirthday"/>
		<result column="family_job" 				property="familyJob"/>
		<result column="family_addr" 				property="familyAddr"/>
		<result column="family_phone" 				property="familyPhone"/>
		<result column="balryoung_info_code" 		property="balryoungInfoCode"/>
		<result column="balryoung_staff_num" 		property="balryoungStaffNum"/>
		<result column="balryoung_code" 			property="balryoungCode"/>
		<result column="balryoung_date" 			property="balryoungDate"/>
		<result column="balryoung_stage" 			property="balryoungStage"/>
		<result column="career_info_from_in_code" 	property="careerInfoFromInCode"/>
		<result column="project_name" 				property="projectName"/>
		<result column="project_start_date" 		property="projectStartDate"/>
		<result column="project_end_date" 			property="projectEndDate"/>
		<result column="project_access" 			property="projectAccess"/>
		<result column="project_level_name" 		property="projectLevelName"/>
		<result column="project_work" 				property="projectWork"/>
		<result column="project_position" 			property="projectPosition"/>
		<result column="career_info_from_out_code" 	property="careerInfoFromOutCode"/>
		<result column="company_name" 				property="companyName"/>
		<result column="company_access" 			property="companyAccess"/>
		<result column="company_position_from_out" 	property="companyPositionFromOut"/>
		<result column="company_work_form_out" 		property="companyWorkFormOut"/>
		<result column="company_in_date_from_out" 	property="companyInDateFromOut"/>
		<result column="company_out_date_from_out" 	property="companyOutDateFromOut"/>
		<result column="company_out_reason" 		property="companyOutReason"/>
		<result column="certificate_info_code" 		property="certificateInfoCode"/>
		<result column="certificate_name" 			property="certificateName"/>
		<result column="issuing_agency" 			property="issuingAgency"/>
		<result column="certificate_num" 			property="certificateNum"/>
		<result column="get_date" 					property="getDate"/>
		<result column="finished_date" 				property="finishedDate"/>
		<result column="education_info_code" 		property="educationInfoCode"/>
		<result column="school_name" 				property="schoolName"/>
		<result column="gakryuck_status" 			property="gakryuckStatus"/>
		<result column="major_name" 				property="majorName"/>
		<result column="minor_name" 				property="minorName"/>
		<result column="entrance_date" 				property="entranceDate"/>
		<result column="graduat_date" 				property="graduatDate"/>
		<result column="degree" 					property="degree"/>
		<result column="military_info_code" 		property="militaryInfoCode"/>
		<result column="military_service_type" 		property="militaryServiceType"/>
		<result column="military_state" 			property="militaryState"/>
		<result column="jaejic_status_name" 		property="jaejicStatusName"/>
		<result column="military_in_day" 			property="militaryInDay"/>
		<result column="military_out_day" 			property="militaryOutDay"/>
		<result column="military_level" 			property="militaryLevel"/>
		<result column="level_name" 				property="levelName"/>
		<result column="position_name" 				property="positionName"/>
		<result column="jojic_name" 				property="jojicName"/>		
		<result column="access_name" 				property="accessName"/>		
		<result column="position_code" 				property="positionCode"/>		
		<result column="staff_notes" 				property="staffNotes"/>		
		<result column="staff_basic_info_notes" 	property="staffBasicInfoNotes"/>		
		<result column="staff_family_info_notes" 	property="staffFamilyInfoNotes"/>		
		<result column="balryoung_info_notes" 		property="balryoungInfoNotes"/>		
		<result column="career_info_from_in_notes" 	property="careerInfoFromInNotes"/>		
		<result column="career_info_from_out_notes" property="careerInfoFromOutNotes"/>		
		<result column="certificate_info_notes" 	property="certificateInfoNotes"/>		
		<result column="education_info_notes" 		property="educationInfoNotes"/>		
		<result column="military_info_notes" 		property="militaryInfoNotes"/>		
		<result column="data_num" 					property="dataNum"/>	
			
		<result column="punishment_code" 			property="punishmentCode"/>		
		<result column="punishment_name" 			property="punishmentName"/>		
		<result column="parent_code" 				property="parentCode"/>		
		<result column="punishment_val" 			property="punishmentVal"/>		
		<result column="punishment_point" 			property="punishmentPoint"/>		
		<result column="punishment_num" 			property="punishmentNum"/>		
		<result column="given_date" 				property="givenDate"/>		
		<result column="punishment_reason" 			property="punishmentReason"/>		
		<result column="punishment_price" 			property="punishmentPrice"/>		
		<result column="salary_applied_date" 		property="salaryAppliedDate"/>		
		<result column="punishment_notes" 			property="punishmentNotes"/>		
		<result column="prize_code" 				property="prizeCode"/>		
		<result column="prize_name" 				property="prizeName"/>		
		<result column="prize_num" 					property="prizeNum"/>		
		<result column="prize_reason" 				property="prizeReason"/>		
		<result column="prize_price" 				property="prizePrice"/>		
		<result column="prize_notes" 				property="prizeNotes"/>		
	</resultMap>
	
	<resultMap type="Code" id="CodeResultMap">
		<result column="access_num" 				property="accessNum"/>
		<result column="access_name" 				property="accessName"/>
		<result column="jojic_code" 				property="jojicCode"/>
		<result column="jojic_name" 				property="jojicName"/>
		<result column="level_code" 				property="levelCode"/>
		<result column="level_name" 				property="levelName"/>
		<result column="position_code" 				property="positionCode"/>
		<result column="position_name" 				property="positionName"/>
	</resultMap>
	
	<resultMap type="Punishment" id="PunishmentResultMap">
		<result column="punishment_num" 			property="punishmentNum"/>
		<result column="staff_num" 					property="staffNum"/>
		<result column="punishment_code" 			property="punishmentCode"/>
		<result column="punishment_name" 			property="punishmentName"/>
		<result column="given_date" 				property="givenDate"/>
		<result column="punishment_reason" 			property="punishmentReason"/>
		<result column="punishment_price" 			property="punishmentPrice"/>
		<result column="staff_name" 				property="staffName"/>
		<result column="salary_applied_date" 		property="salaryAppliedDate"/>
		<result column="punishment_notes"			property="punishmentNotes"/>
		<result column="reg_staff_name" 			property="regStaffName"/>
		<result column="punishment_point" 			property="punishmentPoint"/>
		<result column="punishment_val" 			property="punishmentVal"/>
	</resultMap>
	
	<!-- 회사 정보 목록 -->
	<select id="getCompanyInfo" resultMap="CompanyResultMap">
		SELECT 
			 company_code
			,company_name
			,company_eng_name
			,mutual_name
			,company_addr
			,company_phone
			,company_ceo_name
			,company_start_date
			,company_num
			,company_fax
			,reg_staff_name
			,reg_date
		FROM
			 is_company
		ORDER BY 
			 company_code DESC
		LIMIT 
			 1
	</select>	
	
	<!-- 일반 직원일때 직원 목록 -->
	<select id="getStaffInfo" parameterType="Map" resultMap="StaffInfoResultMap">
		SELECT 
				 sf.staff_num
				,jojic_name
				,level_name
				,position_name
				,staff_name
				,staff_status_code
				,staff_email
				,staff_phone
				,jaejic_status_name
				
		FROM is_staff 					AS sf
		JOIN is_level 					AS lv
		JOIN is_position 				AS ps
		JOIN is_jojic 					AS jj
		JOIN is_staff_basic_info 		AS sbif
		JOIN is_jaejic 					AS jaejic
		
		
		ON sf.staff_level_code 		= lv.level_code
		AND sf.staff_position_code 	= ps.position_code
		AND sf.jojic_code 			= jj.jojic_code
		AND sf.staff_num 			= sbif.staff_num
		AND sf.staff_status_code 	= jaejic.jaejic_status_code		
		<where>
			<if test="map.sk neq null and map.sk neq ''.toString() and map.sv neq null and map.sv neq ''.toString()">
				AND sf.${map.sk} LIKE CONCAT('%',#{map.sv},'%')
	 		</if>
		</where>
		ORDER BY 			sf.staff_num
		LIMIT 				#{startRow}, #{rowPerPage};
	</select>
	
	<!-- 직원 리스트 & 검색조건 & 페이징 -->
	<select id="getStaffInfoAll" parameterType="Map" resultMap="StaffInfoResultMap">
		SELECT
				*
				,SUM(pn.punishment_point) AS totalPnsmtPoint
				,CONCAT(DATE_FORMAT(FROM_DAYS(TIMESTAMPDIFF(DAY,sf.company_in_date,NOW())),'%y'),'년',DATE_FORMAT(FROM_DAYS(TIMESTAMPDIFF(DAY,sf.company_in_date,NOW())),'%c')-1,'개월') as totalWorkMonths
		FROM 	is_staff 				 	AS sf
				INNER JOIN 	
				is_level 				 	AS lv
				ON 
				sf.staff_level_code = lv.level_code
				LEFT JOIN 
				is_position 			 	AS ps
				ON 
				sf.staff_position_code = ps.position_code
				LEFT JOIN 
				is_jojic 				 	AS jj
				ON
				sf.jojic_code = jj.jojic_code
				LEFT JOIN
				is_staff_basic_info  		AS sbif
				ON
				sf.staff_num = sbif.staff_num
				LEFT JOIN
				is_access			 		AS ac
				ON
				sf.access_num = ac.access_num
				LEFT JOIN
				is_jaejic					AS jc
				ON
				sf.staff_status_code = jc.jaejic_status_code
				LEFT JOIN
				is_punishment_list			AS pl
				on
				sf.staff_num = pl.staff_num
				LEFT JOIN
				is_punishment				AS pn
				on
				pl.punishment_code = pn.punishment_code	
<!-- 				<where>
					<if test="map.searchObj neq null and map.searchObj neq ''.toString() and map.searchVal neq null and map.searchVal neq ''.toString()">
						AND ${map.searchObj} LIKE CONCAT('%',#{map.searchVal},'%')
			 		</if>
				</where> -->	
				GROUP BY sf.staff_num
				LIMIT 	#{startRow}, #{rowPerPage};
	</select>
	<!-- 직원 리스트 & 검색조건 & 페이징 의 전체 행 갯수-->
	<select id="getStaffInfoAllCount" parameterType="Map" resultType="int">
		SELECT	COUNT(*)
		FROM 	is_staff 				 	AS sf
				INNER JOIN 	
				is_level 				 	AS lv
				ON 
				sf.staff_level_code = lv.level_code
				LEFT JOIN 
				is_position 			 	AS ps
				ON 
				sf.staff_position_code = ps.position_code
				LEFT JOIN 
				is_jojic 				 	AS jj
				ON
				sf.jojic_code = jj.jojic_code
				LEFT JOIN
				is_staff_basic_info  		AS sbif
				ON
				sf.staff_num = sbif.staff_num
				LEFT JOIN
				is_access			 		AS ac
				ON
				sf.access_num = ac.access_num
				LEFT JOIN
				is_jaejic					AS jc
				ON
				sf.staff_status_code = jc.jaejic_status_code
				LEFT JOIN
				is_punishment_list			AS pl
				on
				sf.staff_num = pl.staff_num
				LEFT JOIN
				is_punishment				AS pn
				on
				pl.punishment_code = pn.punishment_code	
				LEFT JOIN
				is_prize_list				AS pzl
				on
				sf.staff_num = pzl.staff_num
				LEFT JOIN
				is_prize						AS pz
				on
				pz.prize_code = pzl.prize_code				
<!-- 				<where>
					<if test="map.searchObj neq null and map.searchObj neq ''.toString() and map.searchVal neq null and map.searchVal neq ''.toString()">
						AND ${map.searchObj} LIKE CONCAT('%',#{map.searchVal},'%')
			 		</if>
				</where> -->	
	</select>
	
	
	<!-- 일반 직원일때 직원 목록의 전체 행 갯수 -->
	<select id="getStaffInfoListCount" parameterType="Map" resultType="int">
		SELECT 
				COUNT(*)
				
		FROM is_staff 					AS sf
		JOIN is_level 					AS lv
		JOIN is_position 				AS ps
		JOIN is_jojic 					AS jj
		JOIN is_staff_basic_info 		AS sbif
		JOIN is_jaejic 					AS jaejic
		
		ON sf.staff_level_code 		= lv.level_code
		AND sf.staff_position_code 	= ps.position_code
		AND sf.jojic_code 			= jj.jojic_code
		AND sf.staff_num 			= sbif.staff_num
		AND sf.staff_status_code 	= jaejic.jaejic_status_code
		<where>
			<if test="sk neq null and sk neq ''.toString() and sv neq null and sv neq ''.toString()">
				AND sf.${sk} LIKE CONCAT('%',#{sv},'%')
	 		</if>
		</where>		
		ORDER BY sf.staff_num	
	</select>
	
	<!-- 부서명 가지고 오기 -->
	<select id="getJojicInfo" resultMap="JojicResultMap">
		SELECT
				 jojic_code
				,jojic_name
				,jojic_sosoc_name
				,jojic_status
		FROM
				is_jojic
	</select>
	
	<!-- 팀명 가지고 오기 -->
 	<select id="getTeamName" parameterType="String" resultMap="JojicResultMap">
		SELECT
				jojic_name
		FROM
				is_jojic 
		WHERE
				parent_jojic_name = #{buseoName}
		AND 
				jojic_status = '활성'
	</select>
	
	<!-- 부서별 직원 목록 리스트 가져오기 -->
	<select id="getStaffInfoByParentJojicName" parameterType="HashMap" resultMap="StaffInfoResultMap">
		SELECT 
				 sf.staff_num
				,jojic_name
				,level_name
				,position_name
				,staff_name
				,staff_status_code
				,staff_email
				,staff_phone
				,jaejic_status_name
				,parent_jojic_name
				
		FROM 	is_staff 					AS sf
		JOIN 	is_level 					AS lv
		JOIN 	is_position 				AS ps
		JOIN 	is_jojic 					AS jj
		JOIN	is_staff_basic_info 		AS sbif
		JOIN 	is_jaejic 					AS jaejic
		
		ON		sf.staff_level_code 		= lv.level_code
		AND		sf.staff_position_code 		= ps.position_code
		AND 	sf.jojic_code 				= jj.jojic_code
		AND 	sf.staff_num 				= sbif.staff_num
		AND 	sf.staff_status_code 		= jaejic.jaejic_status_code
		
		WHERE parent_jojic_name = #{buseoName}

		ORDER BY sf.staff_num
		
		LIMIT #{startRow}, #{rowPerPage};
	</select>
	
	<!-- 부서별 직원 목록 리스트의 전체 행 갯수-->
	<select id="getStaffInfoListCountByBuseoName" parameterType="String" resultType="int">	
		SELECT 
				COUNT(*)
				
		FROM 	is_staff 					AS sf
		JOIN 	is_level 					AS lv
		JOIN 	is_position 				AS ps
		JOIN 	is_jojic 					AS jj
		JOIN	is_staff_basic_info 		AS sbif
		JOIN 	is_jaejic 					AS jaejic
		
		ON		sf.staff_level_code 		= lv.level_code
		AND		sf.staff_position_code 		= ps.position_code
		AND 	sf.jojic_code 				= jj.jojic_code
		AND 	sf.staff_num 				= sbif.staff_num
		AND 	sf.staff_status_code 		= jaejic.jaejic_status_code
		
		WHERE	parent_jojic_name = #{buseoName}
	</select>
	
	<!-- 팀별 부서 리스트 가져오기 -->
	<select id="getStaffInfoByTeamName" parameterType="HashMap" resultMap="StaffInfoResultMap">
		SELECT 
				 sf.staff_num
				,jojic_name
				,level_name
				,position_name
				,staff_name
				,staff_status_code
				,staff_email
				,staff_phone
				,jaejic_status_name
				,parent_jojic_name
				
		FROM 	is_staff 					AS sf
		JOIN 	is_level 					AS lv
		JOIN 	is_position 				AS ps
		JOIN 	is_jojic 					AS jj
		JOIN	is_staff_basic_info 		AS sbif
		JOIN 	is_jaejic 					AS jaejic
		
		ON		sf.staff_level_code 		= lv.level_code
		AND		sf.staff_position_code 		= ps.position_code
		AND 	sf.jojic_code 				= jj.jojic_code
		AND 	sf.staff_num 				= sbif.staff_num
		AND 	sf.staff_status_code 		= jaejic.jaejic_status_code
		
		WHERE	jojic_name = #{teamName}

		ORDER 	BY sf.staff_num
		
		LIMIT 	#{startRow}, #{rowPerPage};
	</select>	
	
	<!-- 팀별 부서 리스트 전체 행 갯수 -->
	<select id="getStaffInfoListCountByTeamName" parameterType="String" resultType="int">	
		SELECT 
				COUNT(*)
				
		FROM 	is_staff 					AS sf
		JOIN 	is_level 					AS lv
		JOIN 	is_position 				AS ps
		JOIN 	is_jojic 					AS jj
		JOIN	is_staff_basic_info 		AS sbif
		JOIN 	is_jaejic 					AS jaejic
		
		ON		sf.staff_level_code 		= lv.level_code
		AND		sf.staff_position_code 		= ps.position_code
		AND 	sf.jojic_code 				= jj.jojic_code
		AND 	sf.staff_num 				= sbif.staff_num
		AND 	sf.staff_status_code 		= jaejic.jaejic_status_code
		
		WHERE 	jojic_name = #{teamName}
	</select>	
	
	<!-- 조직 테이블 가져오기 -->
	<select id="getJojicInfoAll" resultMap="JojicResultMap">
		SELECT 
				 jojic_code
				,jojic_name
				,jojic_sosoc_name
				,parent_jojic_name
				,jojic_manager_name
				,reg_staff_name
				,reg_date
				,jojic_status
		FROM 
				 is_jojic
	</select>

	<!-- 소속 코드, 명 가져오기 -->
	<select id="getJojicInfo1" resultMap="CodeResultMap">
		SELECT 
				 jojic_code
				,jojic_name
		FROM 
				 is_jojic	
	</select>
	
	<!-- 권한 레벨, 명 가져오기 -->
	<select id="getAccessInfo" resultMap="CodeResultMap">
		SELECT 
				 access_num
				,access_name
		FROM 
				 is_access	
	</select>
	
	<!-- 직급 코드, 명 가져오기 -->
	<select id="getLevelInfo" resultMap="CodeResultMap">
		SELECT 
				 level_code
				,level_name
		FROM 
				 is_level	
	</select>
	
	<!-- 직책 코드, 명 가져오기 -->
	<select id="getPositionInfo" resultMap="CodeResultMap">
		SELECT 
				 position_code
				,position_name
		FROM 
				 is_position
	</select>
	
	<!-- 활성 상태로 수정하기  -->
	<update id="changeJojicStatus1" parameterType="int">
		UPDATE 
				is_jojic
		SET
				jojic_status='활성'
		WHERE 
		<foreach collection="list" item="jojicName" separator="OR">
			jojic_name = #{jojicName}
		</foreach>
	</update>
	
	<!-- 비활성 상태로 수정하기  -->
	<update id="changeJojicStatus0" parameterType="int">
		UPDATE 
				is_jojic
		SET
				jojic_status='비활성'
		WHERE		
		<foreach collection="list" item="jojicName" separator="OR">
			jojic_name = #{jojicName}
		</foreach>
	</update>
	
	<!-- 직원 필수 입력사항 입력시 -->
	<insert id="insertToIsStaffInfo" parameterType="StaffInfo">
		<selectKey keyProperty="staffNum" resultType="String" order="BEFORE" >
			SELECT
		            CONCAT(
		               RIGHT(REPLACE(#{companyInDate}, '-', ''),6)
		               ,
		               LPAD(
		                  (
		                     select
		                        IFNULL(RIGHT(MAX(s.staff_num),2),0) + 1
		                     FROM is_staff AS s
		                     where
		                        LEFT(s.staff_num, 6)
		                        =
		                        RIGHT(REPLACE(#{companyInDate}, '-', ''),6)
		                  )
		               ,2 ,0))
		</selectKey>
		INSERT INTO 
			is_staff
				( staff_num
				, staff_name
				, jojic_code
				, access_num
				, staff_level_code
				, staff_position_code
				, staff_basic_salary
				, staff_pw
				, staff_status_code
				, employment_status
				, company_in_date
				, staff_notes
				, reg_staff_name
				, reg_date)
		VALUES
				( #{staffNum}
				, #{staffName}
			 	, 'JJ009'
			 	, #{accessNum}
				, #{staffLevelCode}
				, #{staffPositionCode}
			 	, #{staffBasicSalary}
			 	, '0000'
			 	, 'JAEJIC001'
			 	, #{employmentStatus}
			 	, #{companyInDate}
			 	, #{staffNotes}
			 	, '이은혜'
			 	, NOW())	
	</insert>
	
	<!-- 사번 생성해서 가져오기 -->
	<select id="getStaffNum" resultType="String" parameterType="StaffInfo">
		SELECT
			staff_num
		FROM 
			is_staff
		WHERE 
			staff_name = #{staffName} AND company_in_date=#{companyInDate}
	</select>
	
	<!-- 직원 인적사항 등록하기 -->
	<insert id="insertStaffBasicInfo" parameterType="StaffInfo">
		<selectKey keyProperty="basicInfoCode" resultType="String" order="BEFORE" >
			select CONCAT('BSIF',(SELECT MAX(cast(SUBSTRING(basic_info_code,5)AS DECIMAL)) + 1  FROM is_staff_basic_info AS bsif))
		</selectKey>	
		INSERT INTO 
			is_staff_basic_info
				(  basic_info_code
				 , staff_num
				 , staff_eng_name
				 , human_num
				 , staff_gender
				 , staff_nationality
				 , staff_country
				 , staff_phone
				 , staff_email
				 , staff_marriged
				 , staff_addr
				 , staff_basic_info_notes
				 , reg_staff_name
				 , reg_date)
			VALUES 
				(  #{basicInfoCode}
				 , #{staffNum}
				 , #{staffEngName}
				 , #{humanNum}
				 , #{staffGender}
				 , #{staffNationality}
				 , #{staffCountry}
				 , #{staffPhone}
				 , #{staffEmail}
				 , #{staffMarriged}
				 , #{staffAddr}
				 , #{staffBasicInfoNotes}
				 , '이은혜'
				 , NOW())	
	</insert>
	
	<!-- 직원 가족정보 등록하기 -->
	<insert id="insertStaffFamilyInfo" parameterType="StaffInfo">
		<selectKey keyProperty="familyInfoCode" resultType="String" order="BEFORE" >
			select CONCAT('FMLIF',(SELECT MAX(cast(SUBSTRING(family_info_code,6)AS DECIMAL)) + 1  FROM is_staff_family_info AS FMLIF))
		</selectKey>
		INSERT INTO 
			is_staff_family_info
				(	family_info_code
				 , staff_num
				 , relation
				 , family_name
				 , family_birthday
				 , family_job
				 , family_addr
				 , family_phone
				 , staff_family_info_notes
				 , reg_staff_name
				 , reg_date)
			VALUES 
				(  #{familyInfoCode}
				 , #{staffNum}
				 , #{relation}
				 , #{familyName}
				 	<if test="familyBirthday != null and familyBirthday != ''.toString()">			
						, #{familyBirthday}
					</if> 
			 		<if test="familyBirthday == null || familyBirthday == ''.toString()">			
						, null
					</if>
				 , #{familyJob}
				 , #{familyAddr}
				 , #{familyPhone}
				 , #{staffFamilyInfoNotes}
				 , '이은혜'
				 , NOW())	
	</insert>
	
	<!-- 직원 사내경력 정보 등록하기 -->
	<insert id="insertStaffCareerInfoFromIn" parameterType="StaffInfo">
		<selectKey keyProperty="careerInfoFromInCode" resultType="String" order="BEFORE" >
			select CONCAT('CINIF',(SELECT MAX(cast(SUBSTRING(career_info_from_in_code,6)AS DECIMAL)) + 1  FROM is_career_info_from_in AS ci))
		</selectKey>	
		INSERT INTO 
			is_career_info_from_in
				(  career_info_from_in_code
				 , staff_num
				 , project_name
				 , project_start_date
				 , project_end_date
				 , project_access
				 , project_level_name
				 , project_work
				 , project_position
				 , career_info_from_in_notes
				 , reg_staff_name
				 , reg_date)
			VALUES 
				(  #{careerInfoFromInCode}
				 , #{staffNum}
				 , #{projectName}
			 		<if test="projectStartDate != null and projectStartDate != ''.toString()">			
						, #{projectStartDate}
					</if> 
			 		<if test="projectStartDate == null || projectStartDate == ''.toString()">			
						, null
					</if> 
					<if test="projectEndDate != null and projectEndDate != ''.toString()">			
						, #{projectEndDate}
					</if> 
			 		<if test="projectEndDate == null || projectEndDate == ''.toString()">			
						, null
					</if>
				 , #{projectAccess}
				 , #{projectLevelName}
				 , #{projectWork}
				 , #{projectPosition}
				 , #{careerInfoFromInNotes}
				 , '이은혜'
				 , NOW())	
	</insert>
	
	<!-- 직원 사외 경력 정보 등록하기 -->
	<insert id="insertStaffCareerInfoFromOut" parameterType="StaffInfo">
		<selectKey keyProperty="careerInfoFromOutCode" resultType="String" order="BEFORE" >
			select CONCAT('COUTIF',(SELECT MAX(cast(SUBSTRING(career_info_from_out_code,7)AS DECIMAL)) + 1  FROM is_career_info_from_out AS cout))
		</selectKey>	
		INSERT INTO 
			is_career_info_from_out
				(  career_info_from_out_code
				 , staff_num
				 , company_name
				 , company_access
				 , company_position_from_out
				 , company_work_form_out
				 , company_in_date_from_out
				 , company_out_date_from_out
				 , company_out_reason
				 , career_info_from_out_notes
				 , reg_staff_name
				 , reg_date)
			VALUES 
				(  #{careerInfoFromOutCode}
				 , #{staffNum}
				 , #{companyName}
				 , #{companyAccess}
				 , #{companyPositionFromOut}
				 , #{companyWorkFormOut}
				 	<if test="companyInDateFromOut != null and companyInDateFromOut != ''.toString()">			
						, #{companyInDateFromOut}
					</if> 
			 		<if test="companyInDateFromOut == null || companyInDateFromOut == ''.toString()">			
						, null
					</if>				 
				 	<if test="companyOutDateFromOut != null and companyOutDateFromOut != ''.toString()">			
						, #{companyOutDateFromOut}
					</if> 
			 		<if test="companyOutDateFromOut == null || companyOutDateFromOut == ''.toString()">			
						, null
					</if>				 
				 , #{companyOutReason}
				 , #{careerInfoFromOutNotes}
				 , '이은혜'
				 , NOW())	
	</insert>
	
	<!-- 직원 자격증 정보 등록하기 -->
	<insert id="insertStaffCertificateInfo" parameterType="StaffInfo">
		<selectKey keyProperty="certificateInfoCode" resultType="String" order="BEFORE" >
			select CONCAT('CTIF',(SELECT MAX(cast(SUBSTRING(certificate_info_code,5)AS DECIMAL)) + 1  FROM is_certificate_info AS c))
		</selectKey>	
		INSERT INTO 
			is_certificate_info
				(  certificate_info_code
				 , staff_num
				 , certificate_name
				 , issuing_agency
				 , certificate_num
				 , get_date
				 , finished_date
				 , certificate_info_notes
				 , reg_staff_name
				 , reg_date)
			VALUES 
				(  #{certificateInfoCode}
				 , #{staffNum}
				 , #{certificateName}
				 , #{issuingAgency}
				 , #{certificateNum}
				 	<if test="getDate != null and getDate != ''.toString()">			
						, #{getDate}
					</if> 
			 		<if test="getDate == null || getDate == ''.toString()">			
						, null
					</if>					 
				 	<if test="finishedDate != null and finishedDate != ''.toString()">			
						, #{finishedDate}
					</if> 
			 		<if test="finishedDate == null || finishedDate == ''.toString()">			
						, null
					</if>					 
				 , #{certificateInfoNotes}
				 , '이은혜'
				 , NOW())	
	</insert>
	
	<!-- 직원 학력정보 등록하기 -->
	<insert id="insertStaffEducationInfo" parameterType="StaffInfo">
		<selectKey keyProperty="educationInfoCode" resultType="String" order="BEFORE" >
			select CONCAT('EDIF',(SELECT MAX(cast(SUBSTRING(education_info_code,6)AS DECIMAL)) + 1  FROM is_education_info AS ed))
		</selectKey>	
		INSERT INTO 
			is_education_info
				(  education_info_code
				 , staff_num
				 , school_name
				 , hakryuck_status
				 , major_name
				 , minor_name
				 , entrance_date
				 , graduat_date
				 , degree
				 , education_info_notes
				 , reg_staff_name
				 , reg_date)
			VALUES 
				(  #{educationInfoCode}
				 , #{staffNum}
				 , #{schoolName}
				 , #{hakryuckStatus}
				 , #{majorName}
				 , #{minorName}
				 	<if test="entranceDate != null and entranceDate != ''.toString()">			
						, #{entranceDate}
					</if> 
			 		<if test="entranceDate == null || entranceDate == ''.toString()">			
						, null
					</if>				 
				 	<if test="graduatDate != null and graduatDate != ''.toString()">			
						, #{graduatDate}
					</if> 
			 		<if test="graduatDate == null || graduatDate == ''.toString()">			
						, null
					</if>				 
				 , #{degree}
				 , #{educationInfoNotes}
				 , '이은혜'
				 , NOW())	
	</insert>
	
	<!-- 직원 병역정보 등록하기 -->
	<insert id="insertStaffMilitaryInfo" parameterType="StaffInfo">
		<selectKey keyProperty="militaryInfoCode" resultType="String" order="BEFORE" >
			select CONCAT('MLIF',(SELECT MAX(cast(SUBSTRING(military_info_code,5)AS DECIMAL)) + 1  FROM is_military_info AS ml))
		</selectKey>	
		INSERT INTO 
			is_military_info
				(  military_info_code
				 , staff_num
				 , military_service_type
				 , military_state
				 , military_in_day
				 , military_out_day
				 , military_level
				 , military_info_notes
				 , reg_staff_name
				 , reg_date)
			VALUES 
				(  #{militaryInfoCode}
				 , #{staffNum}
				 , #{militaryServiceType}
				 , #{militaryState}
				 	<if test="militaryInDay != null and militaryInDay != ''.toString()">			
						, #{militaryInDay}
					</if> 
			 		<if test="militaryInDay == null || militaryInDay == ''.toString()">			
						, null
					</if>
				 	<if test="militaryOutDay != null and militaryOutDay != ''.toString()">			
						, #{militaryOutDay}
					</if> 
			 		<if test="militaryOutDay == null || militaryOutDay == ''.toString()">			
						, null
					</if>
				 , #{militaryLevel}
				 , #{militaryInfoNotes}
				 , '이은혜'
				 , NOW())	
	</insert>
	
	<!-- 직원 급여기본정보 등록하기 -->
	<insert id="insertStaffSalaryInfo" parameterType="StaffInfo">
		<selectKey keyProperty="dataNum" resultType="String" order="BEFORE" >
			select CONCAT('sal_',(SELECT MAX(cast(SUBSTRING(data_num,5)AS DECIMAL)) + 1  FROM sal_data AS s))
		</selectKey>	
		INSERT INTO 
			sal_data
				 (data_num, data_emp, data_insu, data_resi, data_pro, data_bank, data_account, data_host, data_scrib, data_bate, data_bate_per, data_bate_date1, data_bate_date2, data_expen, data_expen_date1, data_expen_date2, data_taxdepart, data_tax, data_tax_date1, data_tax_date2)
			VALUES 
				 ( #{dataNum}, #{staffNum}, 1, 1, 1, '', '', '', 0, 0, 0, null, null, 0, null, null, 0, 0, null, NULL)
	</insert>
	
	<!-- 사번으로 등록된 인포 가지고 오기 -->
	<select id="getInsertStaffInfo" parameterType="String" resultType="StaffInfo">
		SELECT
						 sf.staff_num				as staffNum
						,jojic_name					as jojicName
						,level_name					as levelName
						,position_name				as positionName
						,staff_name					as staffName
						,sf.employment_status		as employmentStatus
						,ac.access_name				as accessName
						,sf.staff_basic_salary		as staffBasicSalary
						,sf.company_in_date			as companyInDate
						,sf.staff_notes				as staffNotes
		FROM 	is_staff 				 AS sf
				INNER JOIN 	
				is_level 				 AS lv
				ON 
				sf.staff_level_code = lv.level_code
				LEFT JOIN 
				is_position 			 AS ps
				ON 
				sf.staff_position_code = ps.position_code
				LEFT JOIN 
				is_jojic 				 AS jj
				on
				sf.jojic_code = jj.jojic_code
				LEFT JOIN
				is_staff_basic_info  AS sbif
				on
				sf.staff_num = sbif.staff_num
				LEFT JOIN
				is_access			 AS ac
				on
				sf.access_num = ac.access_num
				
		WHERE 
				sf.staff_num = #{staffNum}
	</select>
	
	<!-- 조직도 - 부서 추가 생성하기 -->
	<insert id="insertBuseoName" parameterType="String">
		INSERT INTO
				is_jojic
					(	jojic_code
					 , jojic_name
					 , jojic_sosoc_name
					 , parent_jojic_name
					 , reg_staff_name
					 , reg_date
					 , jojic_status)
		VALUES (
					   CONCAT('JJ',(SELECT max(SUBSTRING(jojic_code,3)) + 1 FROM is_jojic AS jj))
					 , #{insertBuseoName}
					 , '부서'
					 , '이사'
					 , '이은혜'
					 , NOW()
					 , '활성')
	</insert>
	
	<!-- 조직도 - 팀 추가 생성하기 -->
	<insert id="insertTeamName" parameterType="String">
		INSERT INTO
				is_jojic
					(	jojic_code
					 , jojic_name
					 , jojic_sosoc_name
					 , parent_jojic_name
					 , reg_staff_name
					 , reg_date
					 , jojic_status)
		VALUES (
					   CONCAT('JJ',(SELECT max(SUBSTRING(jojic_code,3)) + 1 FROM is_jojic AS jj))
					 , #{insertTeamName}
					 , '팀'
					 , #{modalSosocVal}
					 , '이은혜'
					 , NOW()
					 , '활성')
	</insert>
	
	<!-- 징계리스트 & 페이징 & 검색어 -->
	<select id="getPnshList" parameterType="Map" resultMap="PunishmentResultMap">
		SELECT 
				  pl.punishment_num
				, pl.staff_num
				, s.staff_name
				, pl.punishment_code
				, p.punishment_name
				, pl.given_date
				, pl.punishment_reason
				, pl.punishment_price
				, pl.salary_applied_date
				, pl.punishment_notes
				, pl.reg_staff_name
				, p.punishment_val
				<if test="map.punishmentNum neq null and map.punishmentNum neq ''.toString()">
					, SUM(p.punishment_point) AS totalPnsmtPoint
	 			</if>
<!-- 		 		, SUM(p.punishment_point) AS totalPnsmtPoint  -->
		FROM 	is_punishment_list 	AS pl
				INNER JOIN
				is_punishment			AS p
				on
				pl.punishment_code = p.punishment_code
				INNER JOIN
				is_staff					AS s
				on
				s.staff_num = pl.staff_num	
		<where>
			<if test="map.punishmentNum neq null and map.punishmentNum neq ''.toString()">
				<!-- pl.punishment_num LIKE CONCAT('%',#{map.punishmentNum},'%') -->
				pl.punishment_num = #{map.punishmentNum}
				GROUP BY pl.staff_num
	 		</if>
		
		</where>
		LIMIT 	#{startRow}, #{rowPerPage};
	</select>
	
	<!-- 징계리스트 & 페이징 & 검색어의 전체 행 갯수 -->
	<select id="getPnshListCount" parameterType="Map" resultType="int">
		SELECT	
				COUNT(*)
		FROM 	is_punishment_list 	AS pl
				INNER JOIN
				is_punishment			AS p
				on
				pl.punishment_code = p.punishment_code
				INNER JOIN
				is_staff					AS s
				on
				s.staff_num = pl.staff_num	

	</select>
</mapper>	
