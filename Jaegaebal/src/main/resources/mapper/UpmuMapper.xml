<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.jaegaebal.mapper.UpmuMapper">
<!-- 임시저장함 - 삭제 -->
	<delete id="delStorage" parameterType="String">
		DELETE 
		FROM 
			um_storage_box
		WHERE
			app_doc_code = #{docCode} 	
	</delete>
<!-- 임시저장함 - 조건검색 -->	
	<select id="searchStorage" resultType="UpmuDocument">
		SELECT 
			s.app_doc_code 			AS docCode
			, s.doc_type			AS docType
			, t.doc_type			AS docTypeName				
			, writer_buseo_code		AS writerBuseoCode
			, writer_num			AS writerNum
			, doc_title				AS docTitle
			, doc_contents			AS docContents
			, write_date			AS writeDate
			, doc_file				AS docFile
			, start_date			AS startDate
			, end_date				AS endDate
			, `security`			AS security
			, deadline				AS deadline
		FROM 
				um_storage_box AS s
			join
				um_doctype AS t
			on
				s.doc_type = t.doc_code
		<if test="sk neq ''.toString">
		where
		${sk} LIKE CONCAT('%',#{sv},'%')
		</if>
	</select>


<!-- 임시저장함 - 전체검색  -->
	<select id="storageBox" resultType="UpmuDocument">
		SELECT
				app_doc_code 		AS docCode
			, t.doc_type 			AS docTypeName
			, s.doc_type 			AS docType
			, writer_buseo_code 	AS writerBuseoCode
			, writer_num			AS writerNum
			, doc_title				AS docTitle
			, doc_contents			AS docContents
			, write_date			AS writeDate
			, doc_file				AS docFile
			, start_date			AS startDate
			, end_date				AS endDate
			,`security`				as security
			, deadline				AS deadline
		FROM
				um_storage_box AS s
			join
				um_doctype AS t
			ON 
				s.doc_type = t.doc_code
	
	</select>
		
<!-- 상신함 - 조건검색 -->	
	<select id="searchAppList" resultType="UpmuDocument">
		SELECT
			app_code			as appCode
			,d.app_doc_code		as docCode
			,t.doc_type			as docTypeName
			,writer_buseo_code	as writerBuseoCode
			,writer_num			as writerNum
			,doc_title			as docTitle
			,doc_contents		as docContents
			,write_date			as writeDate
			,doc_file			as docFile
			,start_date			as startDate
			,end_date			as endDate
			,a.app_state		as appStateName
			,SECURITY			as security
			,deadline			as deadline
			,d.doc_type			as docType
		FROM
			um_appstate AS a
			INNER join
			um_document AS d
		ON
			a.app_code=d.app_state
		INNER join
			um_doctype AS t
		on
			t.doc_code=d.doc_type
		<if test="sk neq ''.toString">
		where
		${sk} LIKE CONCAT('%',#{sv},'%')
		</if>
	</select>
	
<!-- 상신함 - 전체 조회  -->
	<select id="myAppList" resultType="UpmuDocument">
		SELECT
			app_code
			,d.app_doc_code		as docCode
			,t.doc_type			as docTypeName
			,writer_buseo_code	as writerBuseoCode
			,writer_num			as writerNum
			,doc_title			as docTitle
			,doc_contents		as docContents
			,write_date			as writeDate
			,doc_file			as docFile
			,start_date			as startDate
			,end_date			as endDate
			,a.app_state		as appStateName
			,SECURITY			as security
			,deadline			as deadline
			,d.doc_type			as docType
		FROM
			um_appstate AS a
			INNER join
			um_document AS d
		ON
			a.app_code=d.app_state
		INNER join
			um_doctype AS t
		on
			t.doc_code=d.doc_type;
	
	 
	</select>
<!-- 기안하기 - 결재라인 선택 완료 db에 넣기  -->
	<insert id="choiceStaff" parameterType="list" >
	INSERT INTO um_app_line
						(
							doc_code
						, app_jojic_code 	
						, staff_level_code  
						, app_staff_num		
						, chamjo)
	VALUES 
	<foreach collection="list" item="item" separator=",">	
		('doc-01'
		, #{item.jojicCode}
		, #{item.levelCode}
		, #{item.staffNum}
		, '')
	</foreach>
	</insert>	
	
<!-- 기안하기 - 결재라인 - 조직도 - 사원  -->
   <select id="getStaff" resultType="StaffInfo">
	SELECT 
		staff_num  			as staffNum
		,staff_name 		as staffName 
		,s.staff_level_code	AS staffLevelCode
		,s.jojic_code		as jojicCode
		,j.jojic_name 		AS jojicName
		,j.jojic_sosoc_name AS jojicSosocName
		,l.level_name 		AS levelName
	FROM 
		is_staff AS s
	join
		is_jojic AS j
	on
		s.jojic_code = j.jojic_code
	join
		is_level AS l
	on
		s.staff_level_code=l.level_code;  
  </select>

<!-- 기안하기 - 결재라인 - 조직도 - 팀  -->
  <select id="getTeam" resultType="Jojic">
	SELECT 
		jojic_name			as jojicName
		,jojic_sosoc_name	as jojicSosocName
		,parent_jojic_name	as parentJojicName
	FROM
		is_jojic
  </select>
  
 <!-- 기안하기 - 결재라인-최상위(부서) 검색  -->
 <select id="getJojic" resultType="Jojic">
 	SELECT 
 		DISTINCT(parent_jojic_name)	as parentJojicName
	FROM 
		is_jojic; 
 </select>
 
 <!-- 기안하기에서 문서유형검색  -->
 <select id="getDocType" resultType="UpmuDocument">
 	SELECT 
 		doc_type as docTypeName
	FROM 
		um_doctype
 </select>
                        
</mapper>